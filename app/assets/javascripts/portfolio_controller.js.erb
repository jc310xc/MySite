// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
$(document).ready(function(){
  var bgs = ["<%= asset_path 'dark_geometric.png' %>", "<%= asset_path '3px-tile.png' %>", "<%= asset_path 'dark_mosaic.png' %>"];
  var bgNames = ["Dark Geometric", "3px Tile", "Dark Mosaic"];

  console.log(bgs);

  var currbg = 0;
  $(document).on('keyup', function(e){
    if(e.keyCode == 40){
      currbg++;
      if(currbg == 3){
        currbg = 0;
      }

      alert(bgNames[currbg]);
      //$("body").css({"background-color" : "#FF0000"});
      $("body").css({"background-image": "url("+bgs[currbg]+")"});
    }
  });

  var ctx;
  var x = 0;
  var y = 0;
  var width = $("#mazeCanvas").width();
  var height = $("#mazeCanvas").height();
  var squareSize = 32;
  var xMax = Math.floor(width/squareSize);
  var yMax = Math.floor(height/squareSize);
  var mazeArr;

  var north = 1, south = 2, east = 4, west = 8;

  var dx = [];
  dx[north] = 0;
  dx[south] = 0;
  dx[east] = 1;
  dx[west] = -1;

  var dy = [];
  dy[north] = -1;
  dy[south] = 1;
  dy[east] = 0;
  dy[west] = 0;

  var opposite = [];
  opposite[north] = south;
  opposite[south] = north;
  opposite[east] = west;
  opposite[west] = east;

  var count = 0;

  function initMaze(){
    var maze = [];
    for(var i = 0; i < xMax; i++){
      maze[i] = [];
      for(var j = 0; j < yMax; j++){
        maze[i][j] = 0;
      }
    }

    return maze;
  }

  //got this method from SO -> http://stackoverflow.com/questions/17118259/javascript-sort-list-randomly
  function shuffleArray(a) { // Fisher-Yates shuffle, no side effects
    var i = a.length, t, j;
    a = a.slice();
    while (--i) t = a[i], a[i] = a[j = ~~(Math.random() * (i+1))], a[j] = t;
    return a;
  }

  function carve_passages_from(count, cx, cy, maze){
    var dirs = shuffleArray([north, south, east, west]);

    //logMaze(maze);

    dirs.forEach(function(dir){
      //reminder: north = 1, south = 2, east = 4, west = 8;
      var nx = cx + dx[dir];
      var ny = cy + dy[dir];

      if(isBetween(nx, 0, maze.length - 1) && (isBetween(ny, 0, maze[0].length - 1) && maze[nx][ny] == 0)){
        maze[cx][cy] += dir;
        maze[nx][ny] += opposite[dir];
        count++;
        carve_passages_from(count, nx, ny, maze);
        // setTimeout(function(){
        //   carve_passages_from(count, nx, ny, maze)
        // },100);
      }
    });

    return maze;
  }

  function isBetween(num, lower, upper){
    return (num >= lower && num <= upper);
  }

  function logMaze(maze){
    for(var i = 0; i < xMax; i++){
      var outStr = "";
      for(var j = 0; j < yMax; j++){
        drawCell(maze[i][j], i, j);
        outStr += maze[i][j] + ",";
      }
      console.log(outStr);
    }
  }

  function drawCell(cellType, xCoord, yCoord){
    var x = xCoord * squareSize;
    var y = yCoord * squareSize;
    //0000
    if(cellType == 0){
      ctx.fillRect(x, y, squareSize, squareSize);
    //0001
    }else if(cellType == 1){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //0010
    }else if(cellType == 2){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
    //0011
    }else if(cellType == 3){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
    //0100
    }else if(cellType == 4){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //0101
    }else if(cellType == 5){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //0110
    }else if(cellType == 6){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);
    //0111
    }else if(cellType == 7){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);
    //1000
    }else if(cellType == 8){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //1001
    }else if(cellType == 9){
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //1010
    }else if(cellType == 10){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);
    //1011
    }else if(cellType == 11){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);
    //1100
    }else if(cellType == 12){
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //1101
    }else if(cellType == 13){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);
    //1110
    }else if(cellType == 14){
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);
    //1111
    }else if(cellType == 15){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);
    }
  }

  function init() {
    ctx = $('#mazeCanvas')[0].getContext("2d");

    ctx.fillStyle = "#BADA55";
    ctx.clearRect(0,0,width,height);

    var mazeArr = initMaze();
    mazeArr = carve_passages_from(0, 0, 0, mazeArr);

    logMaze(mazeArr);
  }

  init();
});
