// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
$(document).ready(function(){
  var bgs = ["<%= asset_path 'dark_geometric.png' %>", "<%= asset_path '3px-tile.png' %>", "<%= asset_path 'dark_mosaic.png' %>"];
  var bgNames = ["Dark Geometric", "3px Tile", "Dark Mosaic"];

  var currbg = 0;
  $(document).on('keyup', function(e){
    if(e.keyCode == 40){
      currbg++;
      if(currbg == 3){
        currbg = 0;
      }

      alert(bgNames[currbg]);
      //$("body").css({"background-color" : "#FF0000"});
      $("body").css({"background-image": "url("+bgs[currbg]+")"});
    }
  });

  var ctx;
  var x = 0;
  var y = 0;
  var width = $("#mazeCanvas").width();
  var height = $("#mazeCanvas").height();
  var squareSize = 32;
  var xMax = Math.floor(width/squareSize);
  var yMax = Math.floor(height/squareSize);
  var mazeArr;
  var path = [];

  var directions = {
    north: 1,
    south: 2,
    east: 4,
    west: 8
  };

  var dx = [];
  dx[directions.north] = 0;
  dx[directions.south] = 0;
  dx[directions.east] = 1;
  dx[directions.west] = -1;

  var dy = [];
  dy[directions.north] = -1;
  dy[directions.south] = 1;
  dy[directions.east] = 0;
  dy[directions.west] = 0;

  var opposite = [];
  opposite[directions.north] = directions.south;
  opposite[directions.south] = directions.north;
  opposite[directions.east] = directions.west;
  opposite[directions.west] = directions.east;

  var count = 0;

  function initMaze(){
    var maze = [];
    for(var i = 0; i < xMax; i++){
      maze[i] = [];
      for(var j = 0; j < yMax; j++){
        maze[i][j] = 0;
      }
    }

    return maze;
  }

  //got this method from SO -> http://stackoverflow.com/questions/17118259/javascript-sort-list-randomly
  function shuffleArray(a) { // Fisher-Yates shuffle, no side effects
    var i = a.length, t, j;
    a = a.slice();
    while (--i) t = a[i], a[i] = a[j = ~~(Math.random() * (i+1))], a[j] = t;
    return a;
  }

  function carve_passages_from(count, cx, cy, maze){
    var dirs = shuffleArray([directions.north, directions.south, directions.east, directions.west]);

    //logMaze(maze);

    dirs.forEach(function(dir){
      //reminder: north = 1, south = 2, east = 4, west = 8;
      var nx = cx + dx[dir];
      var ny = cy + dy[dir];

      //if(isBetween(nx, 0, maze.length - 1) && (isBetween(ny, 0, maze[0].length - 1) && maze[nx][ny] == 0)){
      if(isBetween(nx, 0, maze.length - 1) && (isBetween(ny, 0, maze[0].length - 1) && maze[nx][ny] == 0)){
        maze[cx][cy] += dir;
        maze[nx][ny] += opposite[dir];
        var node = {
          xCoord : cx,
          yCoord : cy,
          direction : maze[cx][cy],
          finished : false
        };
        path.push(node);
        count++;
        carve_passages_from(count, nx, ny, maze);
        // setTimeout(function(){
        //   carve_passages_from(count, nx, ny, maze)
        // },100);
      }
    });

    var node = {
      xCoord : cx,
      yCoord : cy,
      direction : maze[cx][cy],
      finished : true
    };

    path.push(node);

    return path;
  }

  function enumerateExits(encoding){
    var exits = [];
    console.log(encoding);
    var currEncoding = encoding;
    if(currEncoding >= 8){
      exits.push(directions.west);
      currEncoding -= 8;
    }
    if(currEncoding >= 4){
      exits.push(directions.east);
      currEncoding -= 4;
    }
    if(currEncoding >= 2){
      exits.push(directions.south);
      currEncoding -= 2;
    }
    if(currEncoding >= 1){
      exits.push(directions.north);
      currEncoding -= 1;
    }
    //console.log("exits: ", exits);
    return exits;
  }

  function isBetween(num, lower, upper){
    return (num >= lower && num <= upper);
  }

  function logMaze(maze){
    for(var i = 0; i < xMax; i++){
      var outStr = "";
      for(var j = 0; j < yMax; j++){
        drawCell(maze[i][j], i, j, "#ffffff");
        outStr += maze[i][j] + ",";
      }
      console.log(outStr);
    }
  }

  function printPath(index){
    if(index < path.length){
      var color = "#ffffff"

      if(!path[index]){
        color = "#f98484"
      }

      drawCell(path[index].direction, path[index].xCoord, path[index].yCoord, color);

      setTimeout(function(){
        printPath(index+1);
      }, 1);
    }
  }

  function drawCell(cellType, xCoord, yCoord, color){
    var x = xCoord * squareSize;
    var y = yCoord * squareSize;
    //0000
    if(cellType == 0){
      ctx.fillRect(x, y, squareSize, squareSize);
    //0001 -- north
    }else if(cellType == 1){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;
      ctx.fillRect(x + (squareSize/4), y, squareSize/2, 3*squareSize/4);
      ctx.fillStyle = "#bada55";
    //0010 -- south
    }else if(cellType == 2){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y + (squareSize/4), squareSize/2, 3*squareSize/4);
      ctx.fillStyle = "#bada55";
    //0011 -- north, south
    }else if(cellType == 3){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y, squareSize/2, squareSize);
      ctx.fillStyle = "#bada55";
    //0100 -- east
    }else if(cellType == 4){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y + (squareSize/4), 3*squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //0101 -- east, north
    }else if(cellType == 5){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y, squareSize/2, 3*squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (squareSize/4), squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //0110 -- east, south
    }else if(cellType == 6){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y + (squareSize/4), squareSize/2, 3*squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (squareSize/4), squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //0111 -- east, south, north
    }else if(cellType == 7){
      ctx.fillRect(x, y, squareSize/4, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y, squareSize/2, squareSize);
      ctx.fillRect(x + (3*squareSize/4), y + (squareSize/4), squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //1000 -- west
    }else if(cellType == 8){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x, y + (squareSize/4), 3*squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //1001 -- west, north
    }else if(cellType == 9){
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y, squareSize/2, 3*squareSize/4);
      ctx.fillRect(x, y + (squareSize/4), squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //1010 -- west, south
    }else if(cellType == 10){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y + (squareSize/4), squareSize/2, 3*squareSize/4);
      ctx.fillRect(x, y + (squareSize/4), squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //1011 -- west, south, north
    }else if(cellType == 11){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize);
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x + (squareSize/4), y, squareSize/2, squareSize);
      ctx.fillRect(x, y + (squareSize/4), squareSize/4, squareSize/2);
      ctx.fillStyle = "#bada55";
    //1100 -- west, east
    }else if(cellType == 12){
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x, y + (squareSize/4), squareSize, squareSize/2);
      ctx.fillStyle = "#bada55";
    //1101 -- west, east, north
    }else if(cellType == 13){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x, y + (squareSize/4), squareSize, squareSize/2);
      ctx.fillRect(x + (squareSize/4), y, squareSize/2, squareSize/4);
      ctx.fillStyle = "#bada55";
    //1110 -- west, east, south
    }else if(cellType == 14){
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);
      ctx.fillRect(x, y, squareSize, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x, y + (squareSize/4), squareSize, squareSize/2);
      ctx.fillRect(x + (squareSize/4), y + (3*squareSize/4), squareSize/2, squareSize/4);
      ctx.fillStyle = "#bada55";
    //1111 -- all of em
    }else if(cellType == 15){
      ctx.fillRect(x + (3*squareSize/4), y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y, squareSize/4, squareSize/4);
      ctx.fillRect(x, y + (3*squareSize/4), squareSize/4, squareSize/4);
      ctx.fillRect(x + (3*squareSize/4), y + (3*squareSize/4), squareSize/4, squareSize/4);

      ctx.fillStyle = color;

      ctx.fillRect(x, y + (squareSize/4), squareSize, squareSize/2);
      ctx.fillRect(x + (squareSize/4), y + (3*squareSize/4), squareSize/2, squareSize/4);
      ctx.fillRect(x + (squareSize/4), y, squareSize/2, squareSize/4);
      ctx.fillStyle = "#bada55";
    }
  }

  function analyzeMaze(mazeArr, xIndex, yIndex){
    setTimeout(function(){
      console.log(yIndex + ", " + xIndex + ": " + enumerateExits(mazeArr[yIndex][xIndex]));
      drawCell(mazeArr[yIndex][xIndex], yIndex, xIndex, "#00cfbc");
      if(yIndex < mazeArr.length){
        if(xIndex < mazeArr[yIndex].length - 1){
          newY = yIndex;
          newX = xIndex + 1;
        }else{
          newY = yIndex + 1;
          newX = 0;
        }
        analyzeMaze(mazeArr, newX, newY);
      }
    },10);
  }

  function init() {
    ctx = $('#mazeCanvas')[0].getContext("2d");

    ctx.fillStyle = "#BADA55";
    ctx.clearRect(0,0,width,height);

    var mazeArr = initMaze();
    path = carve_passages_from(0, Math.round(Math.random() * (xMax - 1)), Math.round(Math.random() * (yMax - 1)), mazeArr);

    path.push({
        xCoord : 0,
        yCoord : 0,
        direction : mazeArr[0][0] + 1,
        finished : true
    });

    path.push({
        xCoord : xMax - 1,
        yCoord : yMax - 1,
        direction : mazeArr[xMax - 1][yMax - 1] + 2,
        finished : true
    });


    //printPath(0);

    analyzeMaze(mazeArr, 0, 0);
  }

  init();
});
